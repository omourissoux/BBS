import { ethers, BigNumberish } from "ethers";
import { factoryContractInfo } from "./factoryContractInfo";
import { boilerPlateContractInfo } from "./boilerPlateContractInfo";

/*
local hardhat network demo.
see https://hardhat.org/ignition/docs/getting-started#overview
*/

const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545'); // local hardhat network

// !!! generated by local hardhat network never use hard coded and uncrypt private key in production !!!!
const signer = new ethers.Wallet('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', provider);
const connectedWallet = signer.connect(provider);

const ginkgoFactory = new ethers.Contract(factoryContractInfo.address, factoryContractInfo.abi, connectedWallet)

const createGinkgo = async () => {
    const tx = await ginkgoFactory.createContract(connectedWallet, 'BETA GINKGO', "BGNK")
    console.log('tx: ', tx);
}

const getGinkgos = async () => {
    const ginkgos = await ginkgoFactory.getContracts()
    console.log('ginkgo: ', ginkgos);
}

const getBalance = async () => {
    const balance = await provider.getBalance(connectedWallet)
    return ethers.formatEther(balance)
}

const useGinkgoContract = async () => {
    const ginkgo = new ethers.Contract(boilerPlateContractInfo.address, boilerPlateContractInfo.abi, connectedWallet)

    const recipient = '0xcd3B766CCDd6AE721141F452C550Ca635964ce71'

    const balance = await ginkgo.balanceOf(recipient)
    console.log('balance: ', ethers.formatEther(balance));

    //await ginkgo.addToWhitelist(recipient)

    //  const tx = await ginkgo.transfer(recipient, ethers.parseUnits('2', 18))
    // console.log('tx: ', tx);
}

const getGinkgoBalance = async () => {
    const ginkgo = new ethers.Contract(boilerPlateContractInfo.address, boilerPlateContractInfo.abi, connectedWallet)

    const balance = await ginkgo.balanceOf(connectedWallet)
    console.log('balance: ', ethers.formatEther(balance));
};

const mint = async (connectedWallet: ethers.Wallet) => {
    const ginkgo = new ethers.Contract(boilerPlateContractInfo.address, boilerPlateContractInfo.abi, connectedWallet)
    
        const tx = await ginkgo.mint(connectedWallet, ethers.parseUnits('100', 18))
        console.log('tx: ', tx);
    
}

const main = async () => {
    console.log('connected: ', connectedWallet);

    await getGinkgoBalance();
    // await mint(connectedWallet);
    //await createGinkgo();

    await useGinkgoContract();

    await getGinkgoBalance();
    //await getGinkgos();
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
  });
  

